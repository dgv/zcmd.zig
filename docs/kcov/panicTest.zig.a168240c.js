var data = {lines:[
{"lineNum":"    1","line":"const std = @import(\"std\");"},
{"lineNum":"    2","line":"const testing = std.testing;"},
{"lineNum":"    3","line":"const zcmd = @import(\"zcmd.zig\");"},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"test \"runCommandAndGetResult no binary panics trigger\" {","class":"lineCov","hits":"1","order":"64",},
{"lineNum":"    6","line":"    const allocator = testing.allocator;","class":"lineCov","hits":"1","order":"55",},
{"lineNum":"    7","line":"    _ = zcmd.runCommandAndGetResult(.{","class":"lineCov","hits":"1","order":"57",},
{"lineNum":"    8","line":"        .allocator = allocator,"},
{"lineNum":"    9","line":"        // guranteed no binary panic"},
{"lineNum":"   10","line":"        .command = &[_][]const u8{\"./tests/witherr_exit_zero.sh\"},"},
{"lineNum":"   11","line":"    }, \"test witherr_exit_zero.sh\");"},
{"lineNum":"   12","line":"}"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"test \"runCommandAndGetResult exit with sigabrt\" {","class":"lineCov","hits":"1","order":"207",},
{"lineNum":"   15","line":"    const allocator = testing.allocator;","class":"lineCov","hits":"1","order":"206",},
{"lineNum":"   16","line":"    _ = zcmd.runCommandAndGetResult(.{","class":"lineCov","hits":"1","order":"205",},
{"lineNum":"   17","line":"        .allocator = allocator,"},
{"lineNum":"   18","line":"        // guranteed no binary panic"},
{"lineNum":"   19","line":"        .command = &[_][]const u8{\"./tests/exit_sigabrt\"},"},
{"lineNum":"   20","line":"    }, \"test exit with sigabrt\");"},
{"lineNum":"   21","line":"}"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"test \"runCommandAndGetResult exit with not zero\" {","class":"lineCov","hits":"1","order":"1",},
{"lineNum":"   24","line":"    const allocator = testing.allocator;","class":"lineCov","hits":"1","order":"2",},
{"lineNum":"   25","line":"    _ = zcmd.runCommandAndGetResult(.{","class":"lineCov","hits":"1","order":"3",},
{"lineNum":"   26","line":"        .allocator = allocator,"},
{"lineNum":"   27","line":"        // guranteed no binary panic"},
{"lineNum":"   28","line":"        .command = &[_][]const u8{ \"ls\", \"./notexist\" },"},
{"lineNum":"   29","line":"    }, \"test exit with not zero\");"},
{"lineNum":"   30","line":"}"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"// test \"runCommandAndGetResult exit with stop\" {"},
{"lineNum":"   33","line":"//     const allocator = testing.allocator;"},
{"lineNum":"   34","line":"//     _ = zcmd.runCommandAndGetResult(.{"},
{"lineNum":"   35","line":"//         .allocator = allocator,"},
{"lineNum":"   36","line":"//         // guranteed no binary panic"},
{"lineNum":"   37","line":"//         .command = &[_][]const u8{\"./tests/exit_stop\"},"},
{"lineNum":"   38","line":"//     }, \"test exit with stop\");"},
{"lineNum":"   39","line":"// }"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"// test \"runCommandAndGetResult exit with unknown reason\" {"},
{"lineNum":"   42","line":"//     const allocator = testing.allocator;"},
{"lineNum":"   43","line":"//     _ = zcmd.runCommandAndGetResult(.{"},
{"lineNum":"   44","line":"//         .allocator = allocator,"},
{"lineNum":"   45","line":"//         // guranteed no binary panic"},
{"lineNum":"   46","line":"//         .command = &[_][]const u8{\"./tests/exit_unknown\"},"},
{"lineNum":"   47","line":"//     }, \"test exit with unknown reason\");"},
{"lineNum":"   48","line":"// }"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"test \"catchers\" {","class":"lineCov","hits":"1","order":"42",},
{"lineNum":"   51","line":"    const allocator = testing.allocator;","class":"lineCov","hits":"1","order":"40",},
{"lineNum":"   52","line":"    {"},
{"lineNum":"   53","line":"        const result = try zcmd.runCommandAndGetResultErr(.{","class":"lineCov","hits":"1","order":"56",},
{"lineNum":"   54","line":"            .allocator = allocator,"},
{"lineNum":"   55","line":"            // guranteed no binary panic"},
{"lineNum":"   56","line":"            .command = &[_][]const u8{"},
{"lineNum":"   57","line":"                \"zig\","},
{"lineNum":"   58","line":"                \"test\","},
{"lineNum":"   59","line":"                \"src/panicTest.zig\","},
{"lineNum":"   60","line":"                \"--test-filter\","},
{"lineNum":"   61","line":"                \"runCommandAndGetResult no binary panics trigger\","},
{"lineNum":"   62","line":"            },"},
{"lineNum":"   63","line":"        });"},
{"lineNum":"   64","line":"        defer {"},
{"lineNum":"   65","line":"            allocator.free(result.stdout);","class":"lineCov","hits":"1","order":"39",},
{"lineNum":"   66","line":"            allocator.free(result.stderr);","class":"lineCov","hits":"1","order":"53",},
{"lineNum":"   67","line":"        }"},
{"lineNum":"   68","line":"        try testing.expect(result.stderr.len > 0);","class":"lineCov","hits":"1","order":"44",},
{"lineNum":"   69","line":"        // std.debug.print(\"\\n{s}\\n\", .{result.stderr});"},
{"lineNum":"   70","line":"        const found = std.mem.indexOf(u8, result.stderr, \"Command: { ./tests/witherr_exit_zero.sh } spawn failed error.InvalidExe! Error!\");","class":"lineCov","hits":"1","order":"47",},
{"lineNum":"   71","line":"        try testing.expect(found != null);","class":"lineCov","hits":"1","order":"49",},
{"lineNum":"   72","line":"        if (found) |pos| {","class":"lineCov","hits":"1","order":"36",},
{"lineNum":"   73","line":"            try testing.expect(pos > 0);","class":"lineCov","hits":"1","order":"62",},
{"lineNum":"   74","line":"        }"},
{"lineNum":"   75","line":"    }"},
{"lineNum":"   76","line":"    {"},
{"lineNum":"   77","line":"        const result = try zcmd.runCommandAndGetResultErr(.{","class":"lineCov","hits":"1","order":"46",},
{"lineNum":"   78","line":"            .allocator = allocator,"},
{"lineNum":"   79","line":"            // guranteed sigabrt panic"},
{"lineNum":"   80","line":"            .command = &[_][]const u8{"},
{"lineNum":"   81","line":"                \"zig\","},
{"lineNum":"   82","line":"                \"test\","},
{"lineNum":"   83","line":"                \"src/panicTest.zig\","},
{"lineNum":"   84","line":"                \"--test-filter\","},
{"lineNum":"   85","line":"                \"runCommandAndGetResult exit with sigabrt\","},
{"lineNum":"   86","line":"            },"},
{"lineNum":"   87","line":"        });"},
{"lineNum":"   88","line":"        defer {"},
{"lineNum":"   89","line":"            allocator.free(result.stdout);","class":"lineCov","hits":"1","order":"59",},
{"lineNum":"   90","line":"            allocator.free(result.stderr);","class":"lineCov","hits":"1","order":"52",},
{"lineNum":"   91","line":"        }"},
{"lineNum":"   92","line":"        try testing.expect(result.stderr.len > 0);","class":"lineCov","hits":"1","order":"51",},
{"lineNum":"   93","line":"        // std.debug.print(\"\\n{s}\\n\", .{result.stderr});"},
{"lineNum":"   94","line":"        const found = std.mem.indexOf(u8, result.stderr, \"Command: { ./tests/exit_sigabrt } exited with signal 6! Error!\");","class":"lineCov","hits":"1","order":"61",},
{"lineNum":"   95","line":"        try testing.expect(found != null);","class":"lineCov","hits":"1","order":"38",},
{"lineNum":"   96","line":"        if (found) |pos| {","class":"lineCov","hits":"1","order":"43",},
{"lineNum":"   97","line":"            try testing.expect(pos > 0);","class":"lineCov","hits":"1","order":"41",},
{"lineNum":"   98","line":"        }"},
{"lineNum":"   99","line":"    }"},
{"lineNum":"  100","line":"    {"},
{"lineNum":"  101","line":"        const result = try zcmd.runCommandAndGetResultErr(.{","class":"lineCov","hits":"1","order":"58",},
{"lineNum":"  102","line":"            .allocator = allocator,"},
{"lineNum":"  103","line":"            // guranteed sigabrt panic"},
{"lineNum":"  104","line":"            .command = &[_][]const u8{"},
{"lineNum":"  105","line":"                \"zig\","},
{"lineNum":"  106","line":"                \"test\","},
{"lineNum":"  107","line":"                \"src/panicTest.zig\","},
{"lineNum":"  108","line":"                \"--test-filter\","},
{"lineNum":"  109","line":"                \"runCommandAndGetResult exit with not zero\","},
{"lineNum":"  110","line":"            },"},
{"lineNum":"  111","line":"        });"},
{"lineNum":"  112","line":"        defer {"},
{"lineNum":"  113","line":"            allocator.free(result.stdout);","class":"lineCov","hits":"1","order":"54",},
{"lineNum":"  114","line":"            allocator.free(result.stderr);","class":"lineCov","hits":"1","order":"45",},
{"lineNum":"  115","line":"        }"},
{"lineNum":"  116","line":"        try testing.expect(result.stderr.len > 0);","class":"lineCov","hits":"1","order":"48",},
{"lineNum":"  117","line":"        // std.debug.print(\"\\n{s}\\n\", .{result.stderr});"},
{"lineNum":"  118","line":"        const found = std.mem.indexOf(u8, result.stderr, \"Command: { ls, ./notexist } exited with 1! Error!\");","class":"lineCov","hits":"1","order":"50",},
{"lineNum":"  119","line":"        try testing.expect(found != null);","class":"lineCov","hits":"1","order":"37",},
{"lineNum":"  120","line":"        if (found) |pos| {","class":"lineCov","hits":"1","order":"63",},
{"lineNum":"  121","line":"            try testing.expect(pos > 0);","class":"lineCov","hits":"1","order":"60",},
{"lineNum":"  122","line":"        }"},
{"lineNum":"  123","line":"    }"},
{"lineNum":"  124","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "zcmd_kcov_test4", "date" : "2024-01-14 19:55:49", "instrumented" : 35, "covered" : 35,};
var merged_data = [];
