var data = {lines:[
{"lineNum":"    1","line":"const std = @import(\"std\");"},
{"lineNum":"    2","line":"const testing = std.testing;"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"pub const MAX_OUTPUT = 8 * 1024 * 1024 * 1024;"},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"const stderr_writer = std.io.getStdErr().writer();"},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"pub const SimpleRunResult = struct {"},
{"lineNum":"    9","line":"    allocator: std.mem.Allocator,"},
{"lineNum":"   10","line":"    stdout: []const u8,"},
{"lineNum":"   11","line":"    stderr: []const u8,"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"    pub fn deinit(this: *const SimpleRunResult) void {","class":"lineCov","hits":"1","order":"202",},
{"lineNum":"   14","line":"        this.allocator.free(this.stdout);","class":"lineCov","hits":"1","order":"98",},
{"lineNum":"   15","line":"        this.allocator.free(this.stderr);","class":"lineCov","hits":"1","order":"170",},
{"lineNum":"   16","line":"    }"},
{"lineNum":"   17","line":"};"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"/// This one is a simple wrapper of std.ChildProcess.runChildProcess, by providing a little bit of convinience."},
{"lineNum":"   20","line":"/// * it defaults will use cwd if not provided"},
{"lineNum":"   21","line":"/// * it increases the default max_output_bytes to 8G!"},
{"lineNum":"   22","line":"/// * it can accept a stdin_input: []const u8 as the stdin"},
{"lineNum":"   23","line":"/// It will return an error or std.ChildProcess.RunResult, receiver is responsible to free the slices inside"},
{"lineNum":"   24","line":"/// `std.ChildProcess.RunResult`"},
{"lineNum":"   25","line":"pub fn runCommandAndGetResultErr(args: struct {"},
{"lineNum":"   26","line":"    allocator: std.mem.Allocator,"},
{"lineNum":"   27","line":"    command: []const []const u8,"},
{"lineNum":"   28","line":"    stdin_input: ?[]const u8 = null,"},
{"lineNum":"   29","line":"    cwd: ?[]const u8 = null,"},
{"lineNum":"   30","line":"    cwd_dir: ?std.fs.Dir = null,"},
{"lineNum":"   31","line":"    env_map: ?*const std.process.EnvMap = null,"},
{"lineNum":"   32","line":"    max_output_bytes: usize = MAX_OUTPUT,"},
{"lineNum":"   33","line":"    expand_arg0: std.ChildProcess.Arg0Expand = .no_expand,"},
{"lineNum":"   34","line":"}) anyerror!std.ChildProcess.RunResult {","class":"lineCov","hits":"1","order":"10",},
{"lineNum":"   35","line":"    // shameless steal the implementation of runChildProcess from zig source code as I need to customize it a bit"},
{"lineNum":"   36","line":"    var child = std.ChildProcess.init(args.command, args.allocator);","class":"lineCov","hits":"1","order":"11",},
{"lineNum":"   37","line":"    child.stdin_behavior = if (args.stdin_input == null) .Ignore else .Pipe;","class":"lineCov","hits":"1","order":"12",},
{"lineNum":"   38","line":"    child.stdout_behavior = .Pipe;","class":"lineCov","hits":"1","order":"13",},
{"lineNum":"   39","line":"    child.stderr_behavior = .Pipe;","class":"lineCov","hits":"1","order":"14",},
{"lineNum":"   40","line":"    // child.cwd = args.cwd;"},
{"lineNum":"   41","line":"    child.cwd_dir = brk: {","class":"lineCov","hits":"1","order":"15",},
{"lineNum":"   42","line":"        if (args.cwd) |cwd_str| break :brk try std.fs.openDirAbsolute(cwd_str, .{});","class":"lineCov","hits":"1","order":"16",},
{"lineNum":"   43","line":"        if (args.cwd_dir) |cwd| break :brk cwd;","class":"lineCov","hits":"1","order":"17",},
{"lineNum":"   44","line":"        break :brk std.fs.cwd();","class":"lineCov","hits":"1","order":"18",},
{"lineNum":"   45","line":"    };"},
{"lineNum":"   46","line":"    child.env_map = args.env_map;","class":"lineCov","hits":"1","order":"19",},
{"lineNum":"   47","line":"    child.expand_arg0 = args.expand_arg0;","class":"lineCov","hits":"1","order":"20",},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"    var stdout = std.ArrayList(u8).init(args.allocator);","class":"lineCov","hits":"1","order":"21",},
{"lineNum":"   50","line":"    var stderr = std.ArrayList(u8).init(args.allocator);","class":"lineCov","hits":"1","order":"22",},
{"lineNum":"   51","line":"    errdefer {"},
{"lineNum":"   52","line":"        stdout.deinit();","class":"lineCov","hits":"1","order":"189",},
{"lineNum":"   53","line":"        stderr.deinit();","class":"lineCov","hits":"1","order":"154",},
{"lineNum":"   54","line":"    }"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"    try child.spawn();","class":"lineCov","hits":"1","order":"23",},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"    // credit goes to: https://www.reddit.com/r/Zig/comments/13674ed/help_request_using_stdin_with_childprocess/"},
{"lineNum":"   59","line":"    if (args.stdin_input) |si| {","class":"lineCov","hits":"1","order":"24",},
{"lineNum":"   60","line":"        try child.stdin.?.writeAll(si);","class":"lineCov","hits":"1","order":"150",},
{"lineNum":"   61","line":"        child.stdin.?.close();","class":"lineCov","hits":"1","order":"149",},
{"lineNum":"   62","line":"        child.stdin = null;","class":"lineCov","hits":"1","order":"25",},
{"lineNum":"   63","line":"    }"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"    try child.collectOutput(&stdout, &stderr, args.max_output_bytes);","class":"lineCov","hits":"1","order":"26",},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"    return std.ChildProcess.RunResult{","class":"lineCov","hits":"1","order":"30",},
{"lineNum":"   68","line":"        .term = try child.wait(),","class":"lineCov","hits":"1","order":"27",},
{"lineNum":"   69","line":"        .stdout = try stdout.toOwnedSlice(),","class":"lineCov","hits":"1","order":"28",},
{"lineNum":"   70","line":"        .stderr = try stderr.toOwnedSlice(),","class":"lineCov","hits":"1","order":"29",},
{"lineNum":"   71","line":"    };"},
{"lineNum":"   72","line":"}"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"/// This wraps `runCommandAndGetResultErr` to enabled piped commands, such as `ls -la | wc -l`, can be called with"},
{"lineNum":"   75","line":"/// ```"},
{"lineNum":"   76","line":"/// runPipedCommandsAndGetResultErr(.{ .allocator = allocator, .commands = &[_][]const []const u8{"},
{"lineNum":"   77","line":"///     &.{\"ls\", \"la\"},"},
{"lineNum":"   78","line":"///     &.{\"wc\", \"-l\"},"},
{"lineNum":"   79","line":"/// }});"},
{"lineNum":"   80","line":"/// ```"},
{"lineNum":"   81","line":"/// It also provides option `stop_on_any_error` and `stop_on_any_stderr` to control the flow a bit"},
{"lineNum":"   82","line":"/// * when `stop_on_any_error` is true (default is true), will stop at the first command return `anyerror`,"},
{"lineNum":"   83","line":"///   or exit rather than return `0`. In the end return the last command\'s `std.ChildProcess.RunResult`."},
{"lineNum":"   84","line":"/// * when `stop_on_any_stderr` is true (default is false), will stop at the first command exit with return `0`, but"},
{"lineNum":"   85","line":"///   with `stderr` not empty. In the end return the last command\'s `std.ChildProcess.RunResult`."},
{"lineNum":"   86","line":"pub fn runPipedCommandsAndGetResultErr(args: struct {"},
{"lineNum":"   87","line":"    allocator: std.mem.Allocator,"},
{"lineNum":"   88","line":"    commands: []const []const []const u8,"},
{"lineNum":"   89","line":"    stdin_input: ?[]const u8 = null,"},
{"lineNum":"   90","line":"    cwd: ?[]const u8 = null,"},
{"lineNum":"   91","line":"    cwd_dir: ?std.fs.Dir = null,"},
{"lineNum":"   92","line":"    env_map: ?*const std.process.EnvMap = null,"},
{"lineNum":"   93","line":"    max_output_bytes: usize = MAX_OUTPUT,"},
{"lineNum":"   94","line":"    expand_arg0: std.ChildProcess.Arg0Expand = .no_expand,"},
{"lineNum":"   95","line":"    trim_stdout: bool = true,"},
{"lineNum":"   96","line":"    trim_stderr: bool = true,"},
{"lineNum":"   97","line":"    stop_on_any_error: bool = true,"},
{"lineNum":"   98","line":"    stop_on_any_stderr: bool = false,"},
{"lineNum":"   99","line":"}) anyerror!std.ChildProcess.RunResult {","class":"lineCov","hits":"1","order":"69",},
{"lineNum":"  100","line":"    var need_free_to_free: bool = false;","class":"lineCov","hits":"1","order":"67",},
{"lineNum":"  101","line":"    var to_free_result: std.ChildProcess.RunResult = undefined;","class":"lineCov","hits":"1","order":"109",},
{"lineNum":"  102","line":"    var need_free_last: bool = true;","class":"lineCov","hits":"1","order":"89",},
{"lineNum":"  103","line":"    var last_run_result: std.ChildProcess.RunResult = undefined;","class":"lineCov","hits":"1","order":"117",},
{"lineNum":"  104","line":"    for (args.commands, 0..) |command, i| {","class":"lineCov","hits":"1","order":"91",},
{"lineNum":"  105","line":"        if (i > 0 and need_free_last) {","class":"lineCov","hits":"1","order":"77",},
{"lineNum":"  106","line":"            to_free_result = last_run_result;","class":"lineCov","hits":"1","order":"75",},
{"lineNum":"  107","line":"            need_free_to_free = true;","class":"lineCov","hits":"1","order":"119",},
{"lineNum":"  108","line":"        }"},
{"lineNum":"  109","line":"        last_run_result = runCommandAndGetResultErr(.{","class":"lineCov","hits":"1","order":"172",},
{"lineNum":"  110","line":"            .allocator = args.allocator,","class":"lineCov","hits":"1","order":"92",},
{"lineNum":"  111","line":"            .command = command,"},
{"lineNum":"  112","line":"            .stdin_input = brk: {"},
{"lineNum":"  113","line":"                if (i == 0) {","class":"lineCov","hits":"1","order":"95",},
{"lineNum":"  114","line":"                    if (args.stdin_input) |stdin_input| break :brk stdin_input else break :brk null;","class":"lineCov","hits":"1","order":"126",},
{"lineNum":"  115","line":"                } else break :brk last_run_result.stdout;","class":"lineCov","hits":"1","order":"145",},
{"lineNum":"  116","line":"            },"},
{"lineNum":"  117","line":"            .cwd = args.cwd,","class":"lineCov","hits":"1","order":"192",},
{"lineNum":"  118","line":"            .cwd_dir = args.cwd_dir,"},
{"lineNum":"  119","line":"            .env_map = args.env_map,","class":"lineCov","hits":"1","order":"122",},
{"lineNum":"  120","line":"            .max_output_bytes = args.max_output_bytes,","class":"lineCov","hits":"1","order":"123",},
{"lineNum":"  121","line":"            .expand_arg0 = args.expand_arg0,","class":"lineCov","hits":"1","order":"160",},
{"lineNum":"  122","line":"        }) catch |err| {"},
{"lineNum":"  123","line":"            defer {"},
{"lineNum":"  124","line":"                if (i > 0 and need_free_to_free) {","class":"lineCov","hits":"1","order":"157",},
{"lineNum":"  125","line":"                    args.allocator.free(to_free_result.stdout);","class":"lineCov","hits":"1","order":"164",},
{"lineNum":"  126","line":"                    args.allocator.free(to_free_result.stderr);","class":"lineCov","hits":"1","order":"127",},
{"lineNum":"  127","line":"                    need_free_to_free = false;","class":"lineCov","hits":"1","order":"97",},
{"lineNum":"  128","line":"                }"},
{"lineNum":"  129","line":"            }"},
{"lineNum":"  130","line":"            if (args.stop_on_any_error) {","class":"lineCov","hits":"1","order":"94",},
{"lineNum":"  131","line":"                return err;","class":"lineCov","hits":"1","order":"82",},
{"lineNum":"  132","line":"            }"},
{"lineNum":"  133","line":"            last_run_result = std.ChildProcess.RunResult{","class":"lineCov","hits":"1","order":"66",},
{"lineNum":"  134","line":"                .term = std.ChildProcess.Term{ .Exited = 1 },"},
{"lineNum":"  135","line":"                .stdout = \"\","},
{"lineNum":"  136","line":"                .stderr = \"\","},
{"lineNum":"  137","line":"            };"},
{"lineNum":"  138","line":"            need_free_last = false;","class":"lineCov","hits":"1","order":"88",},
{"lineNum":"  139","line":"            continue;"},
{"lineNum":"  140","line":"        };"},
{"lineNum":"  141","line":"        defer {"},
{"lineNum":"  142","line":"            if (i > 0 and need_free_to_free) {","class":"lineCov","hits":"1","order":"72",},
{"lineNum":"  143","line":"                args.allocator.free(to_free_result.stdout);","class":"lineCov","hits":"1","order":"204",},
{"lineNum":"  144","line":"                args.allocator.free(to_free_result.stderr);","class":"lineCov","hits":"1","order":"190",},
{"lineNum":"  145","line":"                need_free_to_free = false;","class":"lineCov","hits":"1","order":"73",},
{"lineNum":"  146","line":"            }"},
{"lineNum":"  147","line":"        }"},
{"lineNum":"  148","line":"        switch (last_run_result.term) {","class":"lineCov","hits":"1","order":"120",},
{"lineNum":"  149","line":"            .Exited => |ret| {"},
{"lineNum":"  150","line":"                if (ret != 0 and args.stop_on_any_error) {","class":"lineCov","hits":"1","order":"153",},
{"lineNum":"  151","line":"                    return last_run_result;","class":"lineCov","hits":"1","order":"80",},
{"lineNum":"  152","line":"                }"},
{"lineNum":"  153","line":"                if (last_run_result.stderr.len > 0 and args.stop_on_any_stderr) {","class":"lineCov","hits":"1","order":"183",},
{"lineNum":"  154","line":"                    return last_run_result;","class":"lineCov","hits":"1","order":"128",},
{"lineNum":"  155","line":"                }"},
{"lineNum":"  156","line":"                need_free_last = true;","class":"lineCov","hits":"1","order":"151",},
{"lineNum":"  157","line":"                continue;"},
{"lineNum":"  158","line":"            },"},
{"lineNum":"  159","line":"            else => {"},
{"lineNum":"  160","line":"                if (args.stop_on_any_error) {","class":"lineCov","hits":"1","order":"129",},
{"lineNum":"  161","line":"                    return last_run_result;","class":"lineCov","hits":"1","order":"130",},
{"lineNum":"  162","line":"                }"},
{"lineNum":"  163","line":"                need_free_last = true;","class":"lineCov","hits":"1","order":"100",},
{"lineNum":"  164","line":"                continue;"},
{"lineNum":"  165","line":"            },"},
{"lineNum":"  166","line":"        }"},
{"lineNum":"  167","line":"    }"},
{"lineNum":"  168","line":"    return last_run_result;","class":"lineCov","hits":"1","order":"118",},
{"lineNum":"  169","line":"}"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"/// No error version of `runCommandAndGetResultErr`. It will never return a error and instead @panic when some command"},
{"lineNum":"  172","line":"/// fails. This is most suitable for script or guranteed execution. It returns SimpleRunResult with caller"},
{"lineNum":"  173","line":"/// owned `stdout` and `stderr` slices."},
{"lineNum":"  174","line":"/// * `trim_stdout` and `trim_stderr` can control whether to trim white spaces of `stdout` and `stderr`. Defaultly they"},
{"lineNum":"  175","line":"///   are true."},
{"lineNum":"  176","line":"pub fn runCommandAndGetResult(args: struct {"},
{"lineNum":"  177","line":"    allocator: std.mem.Allocator,"},
{"lineNum":"  178","line":"    command: []const []const u8,"},
{"lineNum":"  179","line":"    stdin_input: ?[]const u8 = null,"},
{"lineNum":"  180","line":"    cwd: ?[]const u8 = null,"},
{"lineNum":"  181","line":"    cwd_dir: ?std.fs.Dir = null,"},
{"lineNum":"  182","line":"    env_map: ?*const std.process.EnvMap = null,"},
{"lineNum":"  183","line":"    max_output_bytes: usize = MAX_OUTPUT,"},
{"lineNum":"  184","line":"    expand_arg0: std.ChildProcess.Arg0Expand = .no_expand,"},
{"lineNum":"  185","line":"    trim_stdout: bool = true,"},
{"lineNum":"  186","line":"    trim_stderr: bool = true,"},
{"lineNum":"  187","line":"}, comptime panic_msg: []const u8) SimpleRunResult {","class":"lineCov","hits":"1","order":"4",},
{"lineNum":"  188","line":"    const rr = runCommandAndGetResultErr(.{","class":"lineCov","hits":"1","order":"9",},
{"lineNum":"  189","line":"        .allocator = args.allocator,"},
{"lineNum":"  190","line":"        .command = args.command,","class":"lineCov","hits":"1","order":"5",},
{"lineNum":"  191","line":"        .cwd = args.cwd,","class":"lineCov","hits":"1","order":"6",},
{"lineNum":"  192","line":"        .cwd_dir = args.cwd_dir,"},
{"lineNum":"  193","line":"        .max_output_bytes = args.max_output_bytes,","class":"lineCov","hits":"1","order":"7",},
{"lineNum":"  194","line":"        .stdin_input = args.stdin_input,","class":"lineCov","hits":"1","order":"8",},
{"lineNum":"  195","line":"    }) catch |err| {"},
{"lineNum":"  196","line":"        stderr_writer.print(\"Command: {s} spawn failed {any}! Error!\\n\", .{ args.command, err }) catch {};","class":"lineCov","hits":"1","order":"187",},
{"lineNum":"  197","line":"        @panic(panic_msg);","class":"lineCov","hits":"1","order":"185",},
{"lineNum":"  198","line":"    };"},
{"lineNum":"  199","line":"    switch (rr.term) {","class":"lineCov","hits":"1","order":"31",},
{"lineNum":"  200","line":"        .Exited => |ret| {"},
{"lineNum":"  201","line":"            if (ret == 0) {","class":"lineCov","hits":"1","order":"32",},
{"lineNum":"  202","line":"                return SimpleRunResult{","class":"lineCov","hits":"1","order":"169",},
{"lineNum":"  203","line":"                    .allocator = args.allocator,","class":"lineCov","hits":"1","order":"180",},
{"lineNum":"  204","line":"                    .stdout = brk: {"},
{"lineNum":"  205","line":"                        if (args.trim_stdout) {","class":"lineCov","hits":"1","order":"175",},
{"lineNum":"  206","line":"                            defer args.allocator.free(rr.stdout);","class":"lineCov","hits":"1","order":"173",},
{"lineNum":"  207","line":"                            break :brk _toOwnedSlice(","class":"lineCov","hits":"1","order":"181",},
{"lineNum":"  208","line":"                                u8,"},
{"lineNum":"  209","line":"                                args.allocator,","class":"lineCov","hits":"1","order":"174",},
{"lineNum":"  210","line":"                                std.mem.trim(u8, rr.stdout, \" \\t\\n\\r\"),","class":"lineCov","hits":"1","order":"203",},
{"lineNum":"  211","line":"                            ) catch {"},
{"lineNum":"  212","line":"                                @panic(\"trim stdout OOM!\");"},
{"lineNum":"  213","line":"                            };"},
{"lineNum":"  214","line":"                        } else break :brk rr.stdout;","class":"lineCov","hits":"1","order":"196",},
{"lineNum":"  215","line":"                    },"},
{"lineNum":"  216","line":"                    .stderr = brk: {"},
{"lineNum":"  217","line":"                        if (args.trim_stderr) {","class":"lineCov","hits":"1","order":"194",},
{"lineNum":"  218","line":"                            defer args.allocator.free(rr.stderr);","class":"lineCov","hits":"1","order":"161",},
{"lineNum":"  219","line":"                            break :brk _toOwnedSlice(","class":"lineCov","hits":"1","order":"163",},
{"lineNum":"  220","line":"                                u8,"},
{"lineNum":"  221","line":"                                args.allocator,","class":"lineCov","hits":"1","order":"168",},
{"lineNum":"  222","line":"                                std.mem.trim(u8, rr.stderr, \" \\t\\n\\r\"),","class":"lineCov","hits":"1","order":"167",},
{"lineNum":"  223","line":"                            ) catch {"},
{"lineNum":"  224","line":"                                @panic(\"trim stderr OOM!\");"},
{"lineNum":"  225","line":"                            };"},
{"lineNum":"  226","line":"                        } else break :brk rr.stderr;","class":"lineCov","hits":"1","order":"178",},
{"lineNum":"  227","line":"                    },"},
{"lineNum":"  228","line":"                };"},
{"lineNum":"  229","line":"            } else {"},
{"lineNum":"  230","line":"                stderr_writer.print(\"Command: {s} exited with {d}! Error!\\n\", .{ args.command, ret }) catch {};","class":"lineCov","hits":"1","order":"33",},
{"lineNum":"  231","line":"            }"},
{"lineNum":"  232","line":"        },"},
{"lineNum":"  233","line":"        .Signal => |ret| {"},
{"lineNum":"  234","line":"            stderr_writer.print(\"Command: {s} exited with signal {d}! Error!\", .{ args.command, ret }) catch {};","class":"lineCov","hits":"1","order":"208",},
{"lineNum":"  235","line":"        },"},
{"lineNum":"  236","line":"        .Stopped => |_| {"},
{"lineNum":"  237","line":"            // stderr_writer.print(\"Command: {s} stopped with {d}! Error!\", .{ args.command, ret }) catch {};"},
{"lineNum":"  238","line":"            @panic(\"never able to reach here until https://github.com/ziglang/zig/issues/18548 resolved.\");"},
{"lineNum":"  239","line":"        },"},
{"lineNum":"  240","line":"        .Unknown => |_| {"},
{"lineNum":"  241","line":"            // stderr_writer.print(\"Command: {s} exited with unknown reason {d}! Error!\", .{ args.command, ret }) catch {};"},
{"lineNum":"  242","line":"            @panic(\"never able to reach here until https://github.com/ziglang/zig/issues/18548 resolved.\");"},
{"lineNum":"  243","line":"        },"},
{"lineNum":"  244","line":"    }"},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":"    stderr_writer.print(\"==== stdout ====\\n{s}\\n==== stderr ====\\n{s}\\n\", .{ rr.stdout, rr.stderr }) catch {};","class":"lineCov","hits":"1","order":"34",},
{"lineNum":"  247","line":"    // we will go panic in below so no free rr.stdout & rr.stderr"},
{"lineNum":"  248","line":"    @panic(panic_msg);","class":"lineCov","hits":"1","order":"35",},
{"lineNum":"  249","line":"}"},
{"lineNum":"  250","line":""},
{"lineNum":"  251","line":"/// This wraps `runCommandAndGetResult` to enabled piped commands, such as `ls -la | wc -l`, can be called with"},
{"lineNum":"  252","line":"/// ```"},
{"lineNum":"  253","line":"/// runPipedCommandAndGetResult(.{ .allocator = allocator, .commands = &[_][]const []const u8{"},
{"lineNum":"  254","line":"///     &.{\"ls\", \"la\"},"},
{"lineNum":"  255","line":"///     &.{\"wc\", \"-l\"},"},
{"lineNum":"  256","line":"/// }});"},
{"lineNum":"  257","line":"/// ```"},
{"lineNum":"  258","line":"/// * no `stop_on_any_error` as any error will cause @panic(panic_msg)"},
{"lineNum":"  259","line":"/// * when `stop_on_any_stderr` is true (default is false), will stop at the first command exit with `stderr` not empty."},
{"lineNum":"  260","line":"///   In the end return the last command\'s `std.ChildProcess.RunResult`."},
{"lineNum":"  261","line":"pub fn runPipedCommandAndGetResult(args: struct {"},
{"lineNum":"  262","line":"    allocator: std.mem.Allocator,"},
{"lineNum":"  263","line":"    commands: []const []const []const u8,"},
{"lineNum":"  264","line":"    stdin_input: ?[]const u8 = null,"},
{"lineNum":"  265","line":"    cwd: ?[]const u8 = null,"},
{"lineNum":"  266","line":"    cwd_dir: ?std.fs.Dir = null,"},
{"lineNum":"  267","line":"    env_map: ?*const std.process.EnvMap = null,"},
{"lineNum":"  268","line":"    max_output_bytes: usize = MAX_OUTPUT,"},
{"lineNum":"  269","line":"    expand_arg0: std.ChildProcess.Arg0Expand = .no_expand,"},
{"lineNum":"  270","line":"    trim_stdout: bool = true,"},
{"lineNum":"  271","line":"    trim_stderr: bool = true,"},
{"lineNum":"  272","line":"    stop_on_any_stderr: bool = false,"},
{"lineNum":"  273","line":"}, comptime panic_msg: []const u8) SimpleRunResult {","class":"lineCov","hits":"1","order":"131",},
{"lineNum":"  274","line":"    var to_free_result: SimpleRunResult = undefined;","class":"lineCov","hits":"1","order":"133",},
{"lineNum":"  275","line":"    var last_run_result: SimpleRunResult = undefined;","class":"lineCov","hits":"1","order":"134",},
{"lineNum":"  276","line":"    for (args.commands, 0..) |command, i| {","class":"lineCov","hits":"1","order":"135",},
{"lineNum":"  277","line":"        if (i > 0) {","class":"lineCov","hits":"1","order":"136",},
{"lineNum":"  278","line":"            to_free_result = last_run_result;","class":"lineCov","hits":"1","order":"139",},
{"lineNum":"  279","line":"        }"},
{"lineNum":"  280","line":""},
{"lineNum":"  281","line":"        last_run_result = runCommandAndGetResult(.{","class":"lineCov","hits":"1","order":"142",},
{"lineNum":"  282","line":"            .allocator = args.allocator,","class":"lineCov","hits":"1","order":"138",},
{"lineNum":"  283","line":"            .command = command,"},
{"lineNum":"  284","line":"            .stdin_input = brk: {"},
{"lineNum":"  285","line":"                if (i == 0) {","class":"lineCov","hits":"1","order":"191",},
{"lineNum":"  286","line":"                    if (args.stdin_input) |stdin_input| break :brk stdin_input else break :brk null;","class":"lineCov","hits":"1","order":"143",},
{"lineNum":"  287","line":"                } else break :brk last_run_result.stdout;","class":"lineCov","hits":"1","order":"199",},
{"lineNum":"  288","line":"            },"},
{"lineNum":"  289","line":"            .cwd = args.cwd,","class":"lineCov","hits":"1","order":"140",},
{"lineNum":"  290","line":"            .cwd_dir = args.cwd_dir,"},
{"lineNum":"  291","line":"            .env_map = args.env_map,","class":"lineCov","hits":"1","order":"195",},
{"lineNum":"  292","line":"            .max_output_bytes = args.max_output_bytes,","class":"lineCov","hits":"1","order":"141",},
{"lineNum":"  293","line":"            .expand_arg0 = args.expand_arg0,","class":"lineCov","hits":"1","order":"186",},
{"lineNum":"  294","line":"        }, panic_msg);"},
{"lineNum":"  295","line":""},
{"lineNum":"  296","line":"        defer {"},
{"lineNum":"  297","line":"            if (i > 0) {","class":"lineCov","hits":"1","order":"68",},
{"lineNum":"  298","line":"                to_free_result.deinit();","class":"lineCov","hits":"1","order":"110",},
{"lineNum":"  299","line":"            }"},
{"lineNum":"  300","line":"        }"},
{"lineNum":"  301","line":""},
{"lineNum":"  302","line":"        if (args.stop_on_any_stderr and last_run_result.stderr.len > 0) {","class":"lineCov","hits":"1","order":"78",},
{"lineNum":"  303","line":"            return last_run_result;","class":"lineCov","hits":"1","order":"76",},
{"lineNum":"  304","line":"        }"},
{"lineNum":"  305","line":"    }"},
{"lineNum":"  306","line":"    return last_run_result;","class":"lineCov","hits":"1","order":"171",},
{"lineNum":"  307","line":"}"},
{"lineNum":"  308","line":""},
{"lineNum":"  309","line":"// internal functions"},
{"lineNum":"  310","line":""},
{"lineNum":"  311","line":"fn _toOwnedSlice(comptime T: type, allocator: std.mem.Allocator, src: []const T) anyerror![]T {","class":"lineCov","hits":"1","order":"125",},
{"lineNum":"  312","line":"    const new_slice = try allocator.alloc(T, src.len);","class":"lineCov","hits":"1","order":"146",},
{"lineNum":"  313","line":"    @memcpy(new_slice, src);","class":"lineCov","hits":"1","order":"144",},
{"lineNum":"  314","line":"    return new_slice;","class":"lineCov","hits":"1","order":"193",},
{"lineNum":"  315","line":"}"},
{"lineNum":"  316","line":""},
{"lineNum":"  317","line":"fn _testIsError(comptime T: type, maybe_value: anyerror!T, expected_error: anyerror) bool {","class":"lineCov","hits":"1","order":"124",},
{"lineNum":"  318","line":"    if (maybe_value) |_| {","class":"lineCov","hits":"1","order":"159",},
{"lineNum":"  319","line":"        return false;","class":"lineCov","hits":"1","order":"165",},
{"lineNum":"  320","line":"    } else |err| {"},
{"lineNum":"  321","line":"        return err == expected_error;","class":"lineCov","hits":"1","order":"158",},
{"lineNum":"  322","line":"    }"},
{"lineNum":"  323","line":"}"},
{"lineNum":"  324","line":""},
{"lineNum":"  325","line":"// all tests"},
{"lineNum":"  326","line":""},
{"lineNum":"  327","line":"test \"single cmd test\" {","class":"lineCov","hits":"1","order":"93",},
{"lineNum":"  328","line":"    const allocator = std.testing.allocator;","class":"lineCov","hits":"1","order":"81",},
{"lineNum":"  329","line":"    {"},
{"lineNum":"  330","line":"        const result = runCommandAndGetResult(.{","class":"lineCov","hits":"1","order":"65",},
{"lineNum":"  331","line":"            .allocator = allocator,"},
{"lineNum":"  332","line":"            .command = &[_][]const u8{ \"uname\", \"-a\" },"},
{"lineNum":"  333","line":"        }, \"test uname -a\");"},
{"lineNum":"  334","line":"        defer result.deinit();","class":"lineCov","hits":"1","order":"85",},
{"lineNum":"  335","line":"        try testing.expect(result.stdout.len > 0);","class":"lineCov","hits":"1","order":"87",},
{"lineNum":"  336","line":"        try testing.expect(result.stderr.len == 0);","class":"lineCov","hits":"1","order":"70",},
{"lineNum":"  337","line":"    }"},
{"lineNum":"  338","line":"    {"},
{"lineNum":"  339","line":"        const result = runCommandAndGetResult(.{","class":"lineCov","hits":"1","order":"71",},
{"lineNum":"  340","line":"            .allocator = allocator,"},
{"lineNum":"  341","line":"            .command = &[_][]const u8{ \"bash\", \"./tests/witherr_exit_zero.sh\" },"},
{"lineNum":"  342","line":"        }, \"test witherr_exit_zero.sh\");"},
{"lineNum":"  343","line":"        defer result.deinit();","class":"lineCov","hits":"1","order":"90",},
{"lineNum":"  344","line":"        try testing.expect(result.stdout.len == 0);","class":"lineCov","hits":"1","order":"74",},
{"lineNum":"  345","line":"        try testing.expect(result.stderr.len > 0);","class":"lineCov","hits":"1","order":"121",},
{"lineNum":"  346","line":"    }"},
{"lineNum":"  347","line":"    {"},
{"lineNum":"  348","line":"        const result = runCommandAndGetResult(.{","class":"lineCov","hits":"1","order":"79",},
{"lineNum":"  349","line":"            .allocator = allocator,"},
{"lineNum":"  350","line":"            .command = &[_][]const u8{ \"uname\", \"-a\" },"},
{"lineNum":"  351","line":"            .trim_stdout = false,"},
{"lineNum":"  352","line":"            .trim_stderr = false,"},
{"lineNum":"  353","line":"        }, \"test uname -a, no trim\");"},
{"lineNum":"  354","line":"        defer result.deinit();","class":"lineCov","hits":"1","order":"84",},
{"lineNum":"  355","line":"        try testing.expect(result.stdout.len > 0);","class":"lineCov","hits":"1","order":"83",},
{"lineNum":"  356","line":"        try testing.expect(result.stderr.len == 0);","class":"lineCov","hits":"1","order":"86",},
{"lineNum":"  357","line":"    }"},
{"lineNum":"  358","line":"}"},
{"lineNum":"  359","line":""},
{"lineNum":"  360","line":"test \"pipe cmd test\" {","class":"lineCov","hits":"1","order":"99",},
{"lineNum":"  361","line":"    const allocator = std.testing.allocator;"},
{"lineNum":"  362","line":"    {"},
{"lineNum":"  363","line":"        const result = try runPipedCommandsAndGetResultErr(.{","class":"lineCov","hits":"1","order":"101",},
{"lineNum":"  364","line":"            .allocator = allocator,"},
{"lineNum":"  365","line":"            .commands = &[_][]const []const u8{"},
{"lineNum":"  366","line":"                &.{ \"find\", \".\", \"-type\", \"f\", \"-exec\", \"stat\", \"-f\", \"\'%m %N\'\", \"{}\", \";\" },"},
{"lineNum":"  367","line":"                &.{ \"sort\", \"-nr\" },"},
{"lineNum":"  368","line":"                &.{\"head\"},"},
{"lineNum":"  369","line":"            },"},
{"lineNum":"  370","line":"        });"},
{"lineNum":"  371","line":"        defer {"},
{"lineNum":"  372","line":"            allocator.free(result.stdout);","class":"lineCov","hits":"1","order":"103",},
{"lineNum":"  373","line":"            allocator.free(result.stderr);","class":"lineCov","hits":"1","order":"104",},
{"lineNum":"  374","line":"        }"},
{"lineNum":"  375","line":"        try testing.expect(result.stdout.len > 0);","class":"lineCov","hits":"1","order":"102",},
{"lineNum":"  376","line":"        try testing.expect(result.stderr.len == 0);","class":"lineCov","hits":"1","order":"105",},
{"lineNum":"  377","line":"    }"},
{"lineNum":"  378","line":"    {"},
{"lineNum":"  379","line":"        var result = runPipedCommandAndGetResult(.{","class":"lineCov","hits":"1","order":"106",},
{"lineNum":"  380","line":"            .allocator = allocator,"},
{"lineNum":"  381","line":"            .commands = &[_][]const []const u8{"},
{"lineNum":"  382","line":"                &.{ \"find\", \".\", \"-type\", \"f\", \"-exec\", \"stat\", \"-f\", \"\'%m %N\'\", \"{}\", \";\" },"},
{"lineNum":"  383","line":"                &.{ \"sort\", \"-nr\" },"},
{"lineNum":"  384","line":"                &.{\"head\"},"},
{"lineNum":"  385","line":"            },"},
{"lineNum":"  386","line":"        }, \"recursively find and list the latest modified files in a directory with subdirectories and times\");"},
{"lineNum":"  387","line":"        defer result.deinit();","class":"lineCov","hits":"1","order":"200",},
{"lineNum":"  388","line":"        try testing.expect(result.stdout.len > 0);","class":"lineCov","hits":"1","order":"197",},
{"lineNum":"  389","line":"        try testing.expect(result.stderr.len == 0);","class":"lineCov","hits":"1","order":"107",},
{"lineNum":"  390","line":"    }"},
{"lineNum":"  391","line":"    {"},
{"lineNum":"  392","line":"        const maybe_result = runPipedCommandsAndGetResultErr(.{","class":"lineCov","hits":"1","order":"108",},
{"lineNum":"  393","line":"            .allocator = allocator,"},
{"lineNum":"  394","line":"            .commands = &[_][]const []const u8{"},
{"lineNum":"  395","line":"                &.{ \"find\", \".\", \"-type\", \"f\", \"-exec\", \"stat\", \"-f\", \"\'%m %N\'\", \"{}\", \";\" },"},
{"lineNum":"  396","line":"                &.{ \"sort-of\", \"-nr\" },"},
{"lineNum":"  397","line":"                &.{\"head\"},"},
{"lineNum":"  398","line":"            },"},
{"lineNum":"  399","line":"        });"},
{"lineNum":"  400","line":"        try testing.expect(_testIsError(","class":"lineCov","hits":"1","order":"179",},
{"lineNum":"  401","line":"            std.ChildProcess.RunResult,"},
{"lineNum":"  402","line":"            maybe_result,"},
{"lineNum":"  403","line":"            error.FileNotFound,"},
{"lineNum":"  404","line":"        ));"},
{"lineNum":"  405","line":"    }"},
{"lineNum":"  406","line":"    {"},
{"lineNum":"  407","line":"        const result = try runPipedCommandsAndGetResultErr(.{","class":"lineCov","hits":"1","order":"201",},
{"lineNum":"  408","line":"            .allocator = allocator,"},
{"lineNum":"  409","line":"            .commands = &[_][]const []const u8{"},
{"lineNum":"  410","line":"                &.{\"notexist.sh\"},"},
{"lineNum":"  411","line":"                &.{ \"uname\", \"-a\" },"},
{"lineNum":"  412","line":"            },"},
{"lineNum":"  413","line":"            .stop_on_any_error = false,"},
{"lineNum":"  414","line":"        });"},
{"lineNum":"  415","line":"        defer {"},
{"lineNum":"  416","line":"            allocator.free(result.stdout);","class":"lineCov","hits":"1","order":"162",},
{"lineNum":"  417","line":"            allocator.free(result.stderr);","class":"lineCov","hits":"1","order":"111",},
{"lineNum":"  418","line":"        }"},
{"lineNum":"  419","line":"        try testing.expect(result.stdout.len > 0);","class":"lineCov","hits":"1","order":"166",},
{"lineNum":"  420","line":"        try testing.expect(result.stderr.len == 0);","class":"lineCov","hits":"1","order":"96",},
{"lineNum":"  421","line":"    }"},
{"lineNum":"  422","line":"    {"},
{"lineNum":"  423","line":"        var result = runPipedCommandAndGetResult(.{","class":"lineCov","hits":"1","order":"177",},
{"lineNum":"  424","line":"            .allocator = allocator,"},
{"lineNum":"  425","line":"            .commands = &[_][]const []const u8{"},
{"lineNum":"  426","line":"                &.{ \"bash\", \"./tests/witherr_exit_zero.sh\" },"},
{"lineNum":"  427","line":"                &.{ \"uname\", \"-a\" },"},
{"lineNum":"  428","line":"            },"},
{"lineNum":"  429","line":"            .stop_on_any_stderr = true,"},
{"lineNum":"  430","line":"        }, \"should stop on ./tests/witherr_exit_zero.sh \");"},
{"lineNum":"  431","line":"        defer result.deinit();","class":"lineCov","hits":"1","order":"156",},
{"lineNum":"  432","line":"        try testing.expect(result.stdout.len == 0);","class":"lineCov","hits":"1","order":"176",},
{"lineNum":"  433","line":"        try testing.expectEqualSlices(u8, result.stderr, \"cat: notexist.txt: No such file or directory\");","class":"lineCov","hits":"1","order":"155",},
{"lineNum":"  434","line":"    }"},
{"lineNum":"  435","line":"    {"},
{"lineNum":"  436","line":"        const result = try runPipedCommandsAndGetResultErr(.{","class":"lineCov","hits":"1","order":"182",},
{"lineNum":"  437","line":"            .allocator = allocator,"},
{"lineNum":"  438","line":"            .commands = &[_][]const []const u8{"},
{"lineNum":"  439","line":"                &.{\"./tests/exit_sigabrt\"},"},
{"lineNum":"  440","line":"                &.{ \"uname\", \"-a\" },"},
{"lineNum":"  441","line":"            },"},
{"lineNum":"  442","line":"            .stop_on_any_error = true,"},
{"lineNum":"  443","line":"        });"},
{"lineNum":"  444","line":"        defer {"},
{"lineNum":"  445","line":"            allocator.free(result.stdout);","class":"lineCov","hits":"1","order":"198",},
{"lineNum":"  446","line":"            allocator.free(result.stderr);","class":"lineCov","hits":"1","order":"188",},
{"lineNum":"  447","line":"        }"},
{"lineNum":"  448","line":"        try testing.expectEqual(result.term.Signal, 6); // 6 is SIGABRT","class":"lineCov","hits":"1","order":"112",},
{"lineNum":"  449","line":"        try testing.expect(result.stdout.len == 0);","class":"lineCov","hits":"1","order":"113",},
{"lineNum":"  450","line":"        try testing.expect(result.stderr.len == 0);","class":"lineCov","hits":"1","order":"184",},
{"lineNum":"  451","line":"    }"},
{"lineNum":"  452","line":"    {"},
{"lineNum":"  453","line":"        const result = try runPipedCommandsAndGetResultErr(.{","class":"lineCov","hits":"1","order":"152",},
{"lineNum":"  454","line":"            .allocator = allocator,"},
{"lineNum":"  455","line":"            .commands = &[_][]const []const u8{"},
{"lineNum":"  456","line":"                &.{\"./tests/exit_sigabrt\"},"},
{"lineNum":"  457","line":"                &.{ \"uname\", \"-a\" },"},
{"lineNum":"  458","line":"            },"},
{"lineNum":"  459","line":"            .stop_on_any_error = false,"},
{"lineNum":"  460","line":"        });"},
{"lineNum":"  461","line":"        defer {"},
{"lineNum":"  462","line":"            allocator.free(result.stdout);","class":"lineCov","hits":"1","order":"148",},
{"lineNum":"  463","line":"            allocator.free(result.stderr);","class":"lineCov","hits":"1","order":"147",},
{"lineNum":"  464","line":"        }"},
{"lineNum":"  465","line":"        try testing.expectEqual(result.term.Exited, 0);","class":"lineCov","hits":"1","order":"114",},
{"lineNum":"  466","line":"        try testing.expect(result.stdout.len > 0);","class":"lineCov","hits":"1","order":"115",},
{"lineNum":"  467","line":"        try testing.expect(result.stderr.len == 0);","class":"lineCov","hits":"1","order":"116",},
{"lineNum":"  468","line":"    }"},
{"lineNum":"  469","line":"}"},
{"lineNum":"  470","line":""},
{"lineNum":"  471","line":"test \"forbidden city\" {","class":"lineCov","hits":"1","order":"132",},
{"lineNum":"  472","line":"    {"},
{"lineNum":"  473","line":"        const maybe_value: anyerror!usize = 5;"},
{"lineNum":"  474","line":"        try testing.expect(!_testIsError(","class":"lineCov","hits":"1","order":"137",},
{"lineNum":"  475","line":"            usize,"},
{"lineNum":"  476","line":"            maybe_value,"},
{"lineNum":"  477","line":"            error.FileNotFound,"},
{"lineNum":"  478","line":"        ));"},
{"lineNum":"  479","line":"    }"},
{"lineNum":"  480","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "zcmd_kcov_test4", "date" : "2024-01-14 19:55:49", "instrumented" : 173, "covered" : 173,};
var merged_data = [];
